#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Usage:
    autoupdate_worker --port <port> [options]

Arguments:
    <port> -- The port to run the server on.

Options:
    --logging (debug | info | error)
    --log_file <log_file> also log to a file
"""

import BaseHTTPServer
import errno
import logging
import os.path
import shutil
import tarfile
import time

from docopt import docopt
import requests

from gitenberg.autoupdate import __version__, queue, util

RDF_URL = "https://www.gutenberg.org/cache/epub/feeds/rdf-files.tar.bz2"
RDF_PATH = "/tmp/rdf.tar.bz2"
RDF_EXTRACT_PATH = "/tmp/extracted_rdf"
# 1 day
RDF_MAX_AGE = 60 * 60 * 24

def download_rdf():
  """Ensures a fresh-enough RDF file is downloaded and extracted.

  Returns True on error."""

  if (os.path.exists(RDF_PATH) and
      (time.time() - os.path.getmtime(RDF_PATH)) < RDF_MAX_AGE):
    return False

  logging.info('Re-downloading RDF library from %s' % RDF_URL)
  try:
    shutil.rmtree(RDF_EXTRACT_PATH)
  except OSError as e:
    # Ignore not finding the directory to remove.
    if e.errno != errno.ENOENT:
      raise

  try:
    with open(RDF_PATH, 'w') as f:
      with requests.get(RDF_URL, stream=True) as r:
        shutil.copyfileobj(r.raw, f)
  except requests.exceptions.RequestException as e:
    logging.error(e)
    return True

  try:
    with tarfile.open(RDF_PATH, 'r') as f:
      f.extractall(RDF_EXTRACT_PATH)
  except tarfile.TarError as e:
    logging.error(e)
    try:
      os.unlink(RDF_PATH)
    except:
      pass
    return True

  return False

class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
  def do_GET(self):
    if self.path != '/health':
      self.send_error(404)
      return

    # Claim we're alive and healthy if we're responding to this GET.
    self.send_response(200)
    self.end_headers()

  def do_POST(self):
    if self.path != '/do_update':
      self.send_error(404)
      return

    if 'Content-Length' not in self.headers:
      self.send_error(400)
      return

    if download_rdf():
      self.send_error(500)
      return

    content_length = int(self.headers['Content-Length'])
    payload_string = self.rfile.read(content_length)
    logging.info('Got a message for %s' % payload_string)
    # TODO(Marc): Process the repository, and take the below if
    # statement if it fails.
    if False:
      self.send_error(500)
      return

    self.send_response(200)
    self.end_headers()

if __name__ == '__main__':
  arguments = docopt(__doc__, version=__version__)

  util.setup_logging(arguments)

  port = int(arguments.get('<port>', '80'))

  server = BaseHTTPServer.HTTPServer(('0.0.0.0', port), RequestHandler)
  try:
    server.serve_forever()
  except KeyboardInterrupt:
    pass
  server.server_close()
