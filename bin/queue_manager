#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Usage:
    queue_manager add <book_id>...
    queue_manager add_range <start> <end>

Options:
    --logging (debug | info | error)
    --log_file <log_file> also log to a file
"""

import itertools
import logging
import re

from docopt import docopt
from gitenberg.util import catalog
from gitenberg.parameters import GITHUB_ORG

from gitenberg_autoupdate import __version__, queue, util

#if repo not in catalog.get_all_repo_names():

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return itertools.izip_longest(fillvalue=fillvalue, *args)

def repo_names_between(start, end):
    for i in range(start, end):
        name = catalog.repo_for_pgid.get(i, None)
        if name is not None:
            yield '%s/%s' % (GITHUB_ORG, name)

if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)

    util.setup_logging(arguments)

    if arguments['add']:
        repos = ('%s/%s' % (GITHUB_ORG, catalog.get_repo_name(book_id))
                 for book_id in arguments['<book_id>'])
    elif arguments['add_range']:
        start = int(arguments['<start>'])
        end = int(arguments['<end>'])
        repos = repo_names_between(start, end)
    for repo_names in grouper(repos, 10):
        result = queue.queue_resource().send_messages(Entries=[
            {
                'Id': re.sub('[^a-zA-Z0-9_]+', '-', repo_name)[-80:],
                'MessageBody': repo_name,
            } for repo_name in repo_names if repo_name is not None])
        if u'Failed' in result and result[u'Failed']:
            print('Adding some entries failed:\n%s' % result)
            sys.exit(1)
